jump main   ; main entry
ret         ; interruption 0 entry

; [Project Euler. Problem 2](https://projecteuler.net/problem=2)
; Each new term in the Fibonacci sequence is generated by adding the previous two terms.
; By starting with 1 and 2, the first 10 terms will be:
; 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
; By considering the terms in the Fibonacci sequence whose values do not exceed four
; million, find the sum of the even-valued terms.

main:
    push 2          ; --> sum=2
    push 1          ; --> prev=1 sum=2
    push 2          ; --> cur=2 prev=1 sum=2

loop:               ; --> cur prev sum
    swap            ; --> prev cur sum
    over            ; --> cur prev cur sum
    add             ; --> next cur sum
    push 4000000    ; --> 4_000_000 next cur sum
    cmp             ; --> next cur sum             ZF=(s0 == s1) BF=(s0 < s1)
    jb result       ; jump if BF

    dup             ; --> next next cur sum
    push 1          ; --> 1 next next cur sum
    and             ; --> 1&next next cur sum
    push 0          ; --> 0 1&next next cur sum
    cmp             ; --> 1&next next cur sum      ZF=(s0 == 0)
    drop            ; --> next cur sum
    jz sum
    jump loop
sum:
    rol             ; --> sum next cur
    over            ; --> next sum next cur
    add             ; --> sum+next next cur
    rol             ; --> cur sum+next next
    rol             ; --> next cur sum+next
    jump loop

done:
    halt

result:
    drop        ; --> cur sum
    drop        ; --> sum
    push done   ; --> A sum
    swap        ; --> sum A
    jump print

print:      ; --> N A
    push 10 ; --> 10 N A
    cmp     ; --> N A ?BF=(10 < N)
    jb next
    jz next

prev:       ; --> N A
    push 48 ; --> '0' N A
    add     ; --> C A
    push 1  ; --> 1 C A
    out     ; --> A
    ret

next:
    dup     ; --> N N A0
    push 10 ; --> 10 N N A0
    swap    ; --> N 10 N A0
    mod     ; --> N%10 N A0
    swap    ; --> N N%10 A0
    push 10 ; --> 10 N N%10 A0
    swap    ; --> N 10 N%10 A0
    div     ; --> N/10 N%10 A0
    push prev ; --> A N/10 N%10 A0
    swap    ; --> N/10 A N%10 A0
    jump print
